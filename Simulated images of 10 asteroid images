#Importing necessary libraries 
import os #interacts with the operating system for directory creation
import matplotlib.pyplot as plt #for visualization
from matplotlib.patches import Circle, Rectangle #To create patches for highlightening areas
from astropy.io import fits #for reading and writing FITS (standard data format in astronomy) files
from astropy.visualization import ZScaleInterval, AsinhStretch, ImageNormalize #Image normalization and stretching
import numpy as np #for mathematical operation 
import pandas as pd #for data structures and data analysis
import random #generates random numbers

#Creating a folder to store all the output images
output_dir = 'asteroids'
os.makedirs(output_dir, exist_ok=True) #creates the directory if not present, but if, then no error should be raised

# Open the FITS file
file_path = os.path.join(output_dir, 'Skymapper_0882916638_2023-05-11T18_52_22_30_red.fits.fz')
with fits.open(file_path) as hdul: #open the file and assign to hdul
    data = hdul[1].data if len(hdul) > 1 else hdul[0].data #retriving data from the second extensions because it is not present in the first

# Converting magnitude of the asteroid streaks to brightness levels #Reference EUCLID paper
def magnitude_to_brightness(magnitude):
    if 20.3 <= magnitude <= 22.2:
        return 0.9  # High brightness
    elif 22.6 <= magnitude <= 23.9:
        return 0.3  # Medium brightness
    elif magnitude >= 25.0:
        return 0.0  # Practically invisible
    return 0.1  # for all other magnitudes

# Function to add streaks to the image and return their locations - new streaks created for each simulation 
#Streaks are created at random location with random orientation from 0◦ to 360◦ (clockwise from east)
# Wiht random magnitudes ranging from 20-26 and apparent velocity around 1 to 80 −1 arcsech^-1 making the streaks with high and low magnitude as well as almost/completely invisible across all exposures (brightness variation is not accounted in the simulated as will be seen in a few asteroid streaks practically), so as to assist in create a detection mode

def add_streaks(data, streak_params):
    streaks = [] #initializing an empty list to storethe streak parameters
    for params in streak_params: #iterating on each set of streaks
        center_x, center_y, length, width, angle, magnitude, velocity = params #The parameters defined for each streak
        streaks.append((center_x, center_y, length, width, angle, magnitude, velocity)) #Adding the parameters to the streak list
        brightness = magnitude_to_brightness(magnitude) * np.max(data)  #convert magnitude to brightness and scale to maximum pixel value
        for w in range(-width//2, width//2 + 1): #iterate on width of streak
            for l in range(-length//2, length//2 + 1):
                x = int(center_x + l * np.cos(angle) - w * np.sin(angle))
                y = int(center_y + l * np.sin(angle) + w * np.cos(angle))
                if 0 <= x < data.shape[1] and 0 <= y < data.shape[0]:
                    data[y, x] = brightness  # Adjusted brightness
    return data, streaks

for w in range(-width//2, width//2 + 1): Iterates over the width of the streak.
for l in range(-length//2, length//2 + 1): Iterates over the length of the streak.
x = int(center_x + l * np.cos(angle) - w * np.sin(angle)): Calculates the x-coordinate of the streak pixel.
y = int(center_y + l * np.sin(angle) + w * np.cos(angle)): Calculates the y-coordinate of the streak pixel.
if 0 <= x < data.shape[1] and 0 <= y < data.shape[0]: Ensures the pixel coordinates are within the image bounds.
data[y, x] = brightness: Sets the pixel brightness.
return data, streaks: Returns the modified data and the list of streaks.

# Generate a single consistent set of asteroid streaks
streak_params = []
for _ in range(10):
    length = random.randint(20, 26)
    width = random.randint(1, 3)
    angle = random.uniform(0, 2*np.pi)
    center_x = random.randint(0, data.shape[1] - 1)  # Use the actual image dimensions
    center_y = random.randint(0, data.shape[0] - 1)
    magnitude = random.uniform(20, 26)
    velocity = random.uniform(1, 80)
    streak_params.append((center_x, center_y, length, width, angle, magnitude, velocity))

# Add streaks to the data and get their locations
data_with_streaks, streaks = add_streaks(data.copy(), streak_params)

# Apply ZScale and Asinh scaling
interval = ZScaleInterval()
vmin, vmax = interval.get_limits(data_with_streaks)
norm = ImageNormalize(vmin=vmin, vmax=vmax, stretch=AsinhStretch())

# 1. Plot the original image without streaks
fig0, ax0 = plt.subplots(figsize=(10, 10))
ax0.imshow(data, cmap='gray', origin='lower')
ax0.set_title('Original Skymapper Image')
ax0.set_xlabel('X Coordinate')
ax0.set_ylabel('Y Coordinate')

output_path0 = os.path.join(output_dir, '1. original_skymapper_image.png')
plt.savefig(output_path0)

# 2. Plot the image with streaks but without scaling
fig1_no_scale, ax1_no_scale = plt.subplots(figsize=(10, 10))
ax1_no_scale.imshow(data_with_streaks, cmap='gray', origin='lower')
ax1_no_scale.set_title('Skymapper Image with Asteroid Streaks (No Scaling)')
ax1_no_scale.set_xlabel('X Coordinate')
ax1_no_scale.set_ylabel('Y Coordinate')

output_path1_no_scale = os.path.join(output_dir, '2. skymapper_image_with_streaks_no_scale.png')
plt.savefig(output_path1_no_scale)

# 3. Plot the original image with streaks and add coordinates (with scaling)
fig1, ax1 = plt.subplots(figsize=(10, 10))
ax1.imshow(data_with_streaks, cmap='gray', origin='lower', norm=norm)
ax1.set_title('Skymapper Image with Asteroid Streaks (Scaled)')
ax1.set_xlabel('X Coordinate')
ax1.set_ylabel('Y Coordinate')

output_path1 = os.path.join(output_dir, '3. skymapper_image_with_streaks.png')
plt.savefig(output_path1)

# 4. Plot the image with streaks identified by circles and add coordinates (with scaling)
fig2, ax2 = plt.subplots(figsize=(10, 10))
ax2.imshow(data_with_streaks, cmap='gray', origin='lower', norm=norm)
for i, (center_x, center_y, length, width, angle, magnitude, velocity) in enumerate(streaks):
    circ = Circle((center_x, center_y), radius=10, edgecolor='red', facecolor='none', linewidth=2)
    ax2.add_patch(circ)
    ax2.text(center_x + 40, center_y + 40, str(i + 1), color='black', fontsize=12, ha='center', va='center')  # Label the streak to the side
ax2.set_title('Skymapper Image with Identified Streaks (Scaled)')
ax2.set_xlabel('X Coordinate')
ax2.set_ylabel('Y Coordinate')

output_path2 = os.path.join(output_dir, '4. skymapper_image_with_identified_streaks.png')
plt.savefig(output_path2)

# 5. Plot zoomed-in views of each asteroid streak and add coordinates (with scaling)
fig3, axs = plt.subplots(2, 5, figsize=(20, 8))
fig3.subplots_adjust(hspace=0.4, wspace=0.4)
for i, (center_x, center_y, length, width, angle, magnitude, velocity) in enumerate(streaks):
    x_min = max(center_x - 20, 0)
    x_max = min(center_x + 20, data.shape[1])
    y_min = max(center_y - 20, 0)
    y_max = min(center_y + 20, data.shape[0])

    ax = axs[i // 5, i % 5]
    ax.imshow(data_with_streaks[y_min:y_max, x_min:x_max], cmap='gray', origin='lower', norm=norm)
    ax.set_xlabel(f'X: {x_min} to {x_max}')
    ax.set_ylabel(f'Y: {y_min} to {y_max}')
    ax.set_title(f'Streak {i+1}\nX: {center_x}, Y: {center_y}, Len: {length}, Wid: {width}\nAng: {angle:.2f}, Mag: {magnitude:.2f}, Vel: {velocity:.2f}')
    ax.axis('on')

output_zoom_path = os.path.join(output_dir, '5. skymapper_image_zoomed_streaks.png')
plt.savefig(output_zoom_path)

# 6. Plot zoomed-in views of each asteroid streak and add coordinates (without scaling)
fig3_no_scale, axs_no_scale = plt.subplots(2, 5, figsize=(20, 8))
fig3_no_scale.subplots_adjust(hspace=0.4, wspace=0.4)
for i, (center_x, center_y, length, width, angle, magnitude, velocity) in enumerate(streaks):
    x_min = max(center_x - 20, 0)
    x_max = min(center_x + 20, data.shape[1])
    y_min = max(center_y - 20, 0)
    y_max = min(center_y + 20, data.shape[0])

    ax = axs_no_scale[i // 5, i % 5]
    ax.imshow(data_with_streaks[y_min:y_max, x_min:x_max], cmap='gray', origin='lower')
    ax.set_xlabel(f'X: {x_min} to {x_max}')
    ax.set_ylabel(f'Y: {y_min} to {y_max}')
    ax.set_title(f'Streak {i+1}\nX: {center_x}, Y: {center_y}, Len: {length}, Wid: {width}\nAng: {angle:.2f}, Mag: {magnitude:.2f}, Vel: {velocity:.2f}')
    ax.axis('on')

output_zoom_path_no_scale = os.path.join(output_dir, '6. skymapper_image_zoomed_streaks_no_scale.png')
plt.savefig(output_zoom_path_no_scale)

# 7. Create an image with grid lines for sub-images (with scaling)
fig5, ax5 = plt.subplots(figsize=(10, 10))
ax5.imshow(data_with_streaks, cmap='gray', origin='lower', norm=norm)
ax5.set_title('Skymapper Image with Grid (Scaled)')

# Adjust the subimage size based on the actual dimensions of the image
grid_rows, grid_cols = 5, 5  # Define the grid size
subimage_height = data_with_streaks.shape[0] // grid_rows
subimage_width = data_with_streaks.shape[1] // grid_cols

# Draw grid lines and sub-image numbers
for i in range(grid_rows + 1):
    ax5.axhline(i * subimage_height, color='black', linestyle='--', linewidth=1)
for j in range(grid_cols + 1):
    ax5.axvline(j * subimage_width, color='black', linestyle='--', linewidth=1)

for i in range(grid_rows):
    for j in range(grid_cols):
        rect = Rectangle((j * subimage_width, i * subimage_height), subimage_width, subimage_height, 
                         linewidth=1, edgecolor='black', facecolor='none')
        ax5.add_patch(rect)
        ax5.text(j * subimage_width + subimage_width / 2, i * subimage_height + subimage_height / 2, 
                 f'{(grid_rows - 1 - i) * grid_cols + j + 1}', color='black', fontsize=12, ha='center', va='center')

output_grid_path = os.path.join(output_dir, '7. skymapper_image_with_grid.png')
plt.savefig(output_grid_path)

# 8. Split the entire image into non-overlapping sub-images based on the grid (with scaling)
fig6, axs = plt.subplots(grid_rows, grid_cols, figsize=(15, 15))
fig6.subplots_adjust(hspace=0.4, wspace=0.4)
for i in range(grid_rows):
    for j in range(grid_cols):
        x_min = j * subimage_width
        x_max = (j + 1) * subimage_width
        y_min = (grid_rows - 1 - i) * subimage_height
        y_max = (grid_rows - i) * subimage_height

        ax = axs[i, j]
        ax.imshow(data_with_streaks[y_min:y_max, x_min:x_max], cmap='gray', origin='lower', norm=norm)

        # Add circles and labels for streaks within the subimage
        for k, (center_x, center_y, length, width, angle, magnitude, velocity) in enumerate(streaks):
            if x_min <= center_x < x_max and y_min <= center_y < y_max:
                circ = Circle((center_x - x_min, center_y - y_min), radius=10, edgecolor='red', facecolor='none', linewidth=2)
                ax.add_patch(circ)
                ax.text(center_x - x_min + 40, center_y - y_min + 40, str(k + 1), color='black', fontsize=12, ha='center', va='center')

        ax.set_title(f'Sub-image {(grid_rows - 1 - i) * grid_cols + j + 1}')
        ax.axis('off')

output_subimages_path = os.path.join(output_dir, '8. skymapper_image_subimages.png')
plt.savefig(output_subimages_path)

# 9. Save each sub-image as a separate PNG file without asteroid identification
for i in range(grid_rows):
    for j in range(grid_cols):
        x_min = j * subimage_width
        x_max = (j + 1) * subimage_width
        y_min = (grid_rows - 1 - i) * subimage_height
        y_max = (grid_rows - i) * subimage_height

        fig_sub, ax_sub = plt.subplots(figsize=(2, 2))
        ax_sub.imshow(data_with_streaks[y_min:y_max, x_min:x_max], cmap='gray', origin='lower', norm=norm)
        ax_sub.axis('off')
        output_subimage_path = os.path.join(output_dir, f'subimage_{i * grid_cols + j + 1}.png')
        plt.savefig(output_subimage_path)
        plt.close(fig_sub)

plt.show()
